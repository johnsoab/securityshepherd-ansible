---
# tasks file for securityshepherd
- name: Install Required Packages
  yum:
    name: "{{ item }}"
    state: latest
  with_items:
    - "tomcat"
    - "firewalld"
    - "unzip"
    - "mariadb-server"
    - "mariadb"
    - "MySQL-python"
    - "libselinux-python"
    - "libsemanage-python"

- name: Start firewalld service
  service:
    name: firewalld
    enabled: true
    state: started


- name: "Setup Firewall Rules for tomcat"
  firewalld:
    port: "{{ item }}/tcp"
    immediate: true
    permanent: true
    state: enabled
    zone: public
  with_items:
    - "{{ http_port }}"
    - "{{ tomcat_http_port }}"
    - "{{ https_port }}"
    - "{{ tomcat_https_port }}"

- name: Setup FirewallD Port Forward for "{{ http_port }}" -> "{{ tomcat_http_port }}" 
  firewalld:
    rich_rule: 'rule family="ipv4" forward-port port="{{ http_port }}" protocol="tcp" to-port="{{ tomcat_http_port }}"'
    immediate: true
    permanent: true
    state: enabled

- name: Setup FirewallD Port Forward for "{{ https_port }}" -> "{{ tomcat_https_port }}" 
  firewalld:
    rich_rule: 'rule family="ipv4" forward-port port="{{ https_port }}" protocol="tcp" to-port="{{ tomcat_https_port }}"'
    immediate: true
    permanent: true
    state: enabled

# - name: Setup IPTables Port Forwarding for HTTP
#   iptables:
#     table: nat
#     chain: PREROUTING
#     in_interface: eth0
#     protocol: tcp
#     match: tcp
#     destination_port: "{{ http_port }}"
#     jump: REDIRECT
#     to_ports: "{{ tomcat_http_port }}"
#     comment: "Redirect web traffic to port {{ tomcat_http_port }}"
# 
# - name: Setup IPTables Port Forwarding for HTTPS
#   iptables:
#     table: nat
#     chain: PREROUTING
#     in_interface: eth0
#     protocol: tcp
#     match: tcp
#     destination_port: "{{ https_port }}"
#     jump: REDIRECT
#     to_ports: "{{ tomcat_https_port }}"
#     comment: "Redirect web traffic to port {{ tomcat_https_port }}"

- name: Start mariadb service
  service:
    name: mariadb
    enabled: true
    state: started

- name: Setup mariadb root account for local access
  mysql_user:
    name: root
    password: "{{ mysql_root_pass }}"
    priv: "*.*:ALL,GRANT"
    host: "{{ item }}"
  with_items:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1
    - localhost
  notify: restart mariadb

- name: Deploy updated root my.cnf
  template:
    src: templates/my.cnf.j2
    dest: /root/.my.cnf
    mode: 0600
    owner: root
    group: root

- name: Remove anonymous user account
  mysql_user:
    name: ''
    host: localhost
    state: absent
  notify: restart mariadb

- name: Copy ss module schema and webapp to server
  copy:
    src: "files/{{ item }}"
    dest: "/tmp/{{ item }}"
    mode: 0600
  with_items:
    - moduleSchemas.sql
    - ROOT.war

- name: Deploy Core Schema from template
  template:
    src: templates/coreSchema.sql.j2
    dest: "{{ mysql_core_schema }}"
    mode: 0600
  notify: restart tomcat

- name: Import Core SS Schema
  command: "mysql -u root --password={{ mysql_root_pass }} -e 'source {{ mysql_core_schema }}' --force"
  when: ss_reset_core_database
  notify: restart tomcat

- name: Import Mobile SS Schema
  command: "mysql -u root --password={{ mysql_root_pass }} -e 'source {{ mysql_module_schema }}' --force"
  when: ss_reset_module_database
  notify: restart tomcat

- name: Check if Keystore Exists with tomcat alias
  command: 'keytool -list -alias tomcat -keystore {{ tomcat_keystore_file }}  -storepass {{ tomcat_keystore_pass }}'
  ignore_errors: true
  changed_when: false
  register: keystore_results

- name: Generate self-signed certs
  command: 'keytool -genkey -noprompt  -alias tomcat  -dname "CN={{ ss_hostname }}, OU=SS, O=OWASP, L=CTF, S=CTF, C=US"  -keystore {{ tomcat_keystore_file }}  -storepass {{ tomcat_keystore_pass }} -keypass {{ tomcat_keystore_pass }} -deststoretype JKS  -keyalg RSA'
  when: keystore_results.rc == 1

- name: Deploy tomcat customizations
  template:
    src: "templates/{{ item }}.j2"
    dest: "{{ tomcat_config_path }}/{{ item }}"
    owner: tomcat
    force: yes
    mode: 0644
  with_items:
    - server.xml
    - web.xml
  notify: restart tomcat

- name: Create tomcat webapp ROOT
  file:
    path: "{{ tomcat_webapp_path }}/ROOT"
    state: directory
    
- name: Deploy tomcat webapp
  unarchive:
    src: "/tmp/ROOT.war"
    dest: "{{ tomcat_webapp_path }}/ROOT/"
    copy: no
    mode: 0755
    owner: tomcat
    group: tomcat
  notify: restart tomcat

- name: Copy custom tomcat/mysql policy
  copy:
    src: files/tomcatmysql.pp
    dest: /tmp/tomcatmysql.pp
    owner: root
    group: root

- name: Install custom policy module for tomcat/mysql
  shell: /usr/sbin/semodule -i /tmp/tomcatmysql.pp
  notify: restart tomcat

- name: Remove temp files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "/tmp/coreSchema.sql"
    - "/tmp/ROOT.war"
    - "/tmp/tomcatmysql.pp"

- name: Start Tomcat service
  service:
    name: tomcat
    enabled: true
    state: started
